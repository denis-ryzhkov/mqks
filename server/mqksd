#!/usr/bin/env python

"""
Server of "mqks" - Message Queue Kept Simple.

Anti-loop import order in mqks.server.lib: state, log, sockets, top_events, workers, gbn_profile, clients.
"""

### become cooperative

import gevent.monkey
gevent.monkey.patch_all()

### import

from critbot import crit
from gbn import gbn
import gc
from gevent import spawn
from gevent.server import StreamServer
import signal
import time

import os, sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.realpath(__file__)))))

from mqks.server.config import config, init_log, log
from mqks.server.lib import gbn_profile
from mqks.server.lib import state
from mqks.server.lib.clients import load_actions
from mqks.server.lib.sockets import get_listener
from mqks.server.lib.workers import on_worker_connected, workers_connector
from mqks.server.lib.top_events import top_events_log_and_reset

### antileak

def antileak():
    """
    Tries to minimize memory leaks by forcing GC from time to time.
    """
    while 1:
        try:
            time.sleep(config['seconds_before_gc'])

            log.info('w{}: gc'.format(state.worker))
            wall = gbn('gc')
            gc.collect()
            gbn(wall=wall)

        except Exception:
            crit()

### main

def main():
    """
    Main entry point.
    """
    init_log()
    try:
        if len(sys.argv) == 3:
            config['port_for_workers'] = int(sys.argv[1])
            config['port_for_clients'] = int(sys.argv[2])

        state.worker = config['workers'].index('{}:{}:{}'.format(config['host'], config['port_for_workers'], config['port_for_clients']))
        log.debug('w{}: starting as {}'.format(state.worker, config['workers'][state.worker]))

        load_actions()
        spawn(antileak)
        spawn(top_events_log_and_reset)

        if config['gbn_profile']:
            gbn_profile._enable_local()

        spawn(workers_connector)
        state.server_for_workers_unix = StreamServer(get_listener('w{}'.format(state.worker)), on_worker_connected)
        state.server_for_workers_inet = StreamServer(get_listener(config['port_for_workers']), on_worker_connected)
        state.server_for_workers_unix.start()
        state.server_for_workers_inet.start()
        # When all workers are connected: server_for_clients is started.

        while 1:
            time.sleep(100500)

    except Exception:
        crit()

if __name__ == '__main__':
    main()
