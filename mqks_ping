#!/usr/bin/env python

"""
"mqks_ping" prints int value or nothing on timeout = 10 seconds.

Usage:
    ./mqks_ping  # microseconds required for one message "publish" and "consume"
    ./mqks_ping messages_waiting_ack  # total
    ./mqks_ping {spell_name}  # see "stats.py"
"""

### import

import gevent.monkey
gevent.monkey.patch_all()

import os, sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.realpath(__file__))))

from gevent import Timeout
from gevent.event import Event
from mqks.client import mqks
from mqks.server.config import config as server_config
from mqks.stats import stats
import sys
import time
from uqid import dtid

### config

config = dict(
    timeout=10,
)

### ping

def ping():
    try:
        mqks.config['workers'] = server_config['workers']

        with Timeout(config['timeout']):
            mqks.connect()

        ### ping

        if len(sys.argv) != 2:
            queue = dtid()
            consumer_id = mqks.consume(queue=queue, events=[queue], on_msg=on_msg, delete_queue_when_unused=True, confirm=True)

            start = time.time()
            mqks.publish(queue, dtid())
            if consumed.wait(timeout=config['timeout']):
                print(int(1000 * 1000 * (time.time() - start)))
            else:
                raise Timeout

        ### stats

        else:
            spell_name = sys.argv[1]
            result = stats(spell_names=[spell_name], timeout=config['timeout'])
            # [['messages_waiting_ack', [0, 0, 0, 0]]]
            print(sum(result[0][1]))


    except (Exception, Timeout):
        pass  # Print nothing, important for monitoring systems.

### on_msg

def on_msg(msg):
    consumed.set()

### main

if __name__ == '__main__':
    consumed = Event()
    ping()
